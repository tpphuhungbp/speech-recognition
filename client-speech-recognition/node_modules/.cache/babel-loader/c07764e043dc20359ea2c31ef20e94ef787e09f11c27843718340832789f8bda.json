{"ast":null,"code":"var _jsxFileName = \"/Users/hungthach/Documents/daiichi/speech-recognition/client-speech-recognition/src/component/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [audioSocket, setAudioSocket] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [receivedData, setReceivedData] = useState([]);\n  const [audioUrl, setAudioUrl] = useState(null); // State to hold audio URL\n  const audioChunksRef = useRef([]);\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://localhost:7001/api/speech-recognition/hung\");\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n    socket.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        if (data.text && data.language) {\n          setReceivedData(prevData => [...prevData, data.text]);\n        } else {\n          console.error(\"Unexpected message format:\", data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN && event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n      mediaRecorderRef.current.start(2000); // Start recording with chunk size of 100ms or every 100ms\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.onstop = () => {\n        const audioUrl = URL.createObjectURL(new Blob(audioChunksRef.current, {\n          type: \"audio/webm\"\n        }));\n        setAudioUrl(audioUrl);\n      };\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech to Text Service\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isConnected ? disconnectWebSocket : connectWebSocket,\n      children: isConnected ? \"Disconnect\" : \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording || !isConnected,\n      children: \"Start Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"Stop Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Saved Audio Playback:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Received Audio Data:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), receivedData ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(Array.from(receivedData), null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio data received.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"tZGU/yGFpCwEpxVlhc7OZTAikuE=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Home","_s","audioSocket","setAudioSocket","mediaRecorderRef","isRecording","setIsRecording","isConnected","setIsConnected","receivedData","setReceivedData","audioUrl","setAudioUrl","audioChunksRef","connectWebSocket","socket","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","text","language","prevData","error","onclose","disconnectWebSocket","close","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","readyState","OPEN","size","push","send","start","stopRecording","stop","onstop","URL","createObjectURL","Blob","type","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","controls","src","stringify","Array","from","_c","$RefreshReg$"],"sources":["/Users/hungthach/Documents/daiichi/speech-recognition/client-speech-recognition/src/component/Home.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\n\nconst Home = () => {\n  const [audioSocket, setAudioSocket] = useState<WebSocket | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [receivedData, setReceivedData] = useState<string[]>([]);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null); // State to hold audio URL\n  const audioChunksRef = useRef<Blob[]>([]);\n\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://localhost:7001/api/speech-recognition/hung\");\n\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n\n    socket.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n\n        if (data.text && data.language) {\n          setReceivedData((prevData) => [...prevData, data.text]);\n        } else {\n          console.error(\"Unexpected message format:\", data);\n        }\n      } catch (error) {\n        console.log(error);\n      }\n    };\n\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN && event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n\n      mediaRecorderRef.current.start(2000); // Start recording with chunk size of 100ms or every 100ms\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      mediaRecorderRef.current.onstop = () => {\n        const audioUrl = URL.createObjectURL(\n          new Blob(audioChunksRef.current, { type: \"audio/webm\" })\n        );\n        setAudioUrl(audioUrl);\n      };\n      setIsRecording(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Speech to Text Service</h1>\n      <button onClick={isConnected ? disconnectWebSocket : connectWebSocket}>\n        {isConnected ? \"Disconnect\" : \"Connect\"}\n      </button>\n      <br />\n      <button onClick={startRecording} disabled={isRecording || !isConnected}>\n        Start Streaming\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        Stop Streaming\n      </button>\n\n      {audioUrl && (\n        <div>\n          <h2>Saved Audio Playback:</h2>\n          <audio controls src={audioUrl} />\n        </div>\n      )}\n      <h2>Received Audio Data:</h2>\n      {receivedData ? (\n        <pre>{JSON.stringify(Array.from(receivedData), null, 2)}</pre>\n      ) : (\n        <p>No audio data received.</p>\n      )}\n    </div>\n  );\n};\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}