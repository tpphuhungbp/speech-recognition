{"ast":null,"code":"var _jsxFileName = \"/Users/hungthach/Documents/daiichi/speech-recognition/client-speech-recognition/src/component/Home.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [audioSocket, setAudioSocket] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [receivedData, setReceivedData] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null); // State to hold audio URL\n  const audioChunksRef = useRef([]);\n  const fetchSavedAudio = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/audio\");\n      const blob = await response.blob();\n      if (blob.size === 0) {\n        console.error(\"Fetched Blob is empty\");\n        return;\n      }\n      const audioUrl = URL.createObjectURL(new Blob([blob], {\n        type: \"audio/webm\"\n      }));\n      setAudioUrl(audioUrl); // Update state with audio URL for playback\n    } catch (error) {\n      console.error(\"Error fetching audio:\", error);\n    }\n  };\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://localhost:7001/api/speech-recognition/\");\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n    socket.onmessage = event => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const audioData = new Uint8Array(reader.result);\n        setReceivedData(audioData);\n\n        // Create a Blob and an object URL for audio playback\n        const blob = new Blob([audioData], {\n          type: \"audio/webm; codecs=opus\"\n        });\n        const url = URL.createObjectURL(blob);\n        setAudioUrl(url); // Set the audio URL for playback\n\n        console.log(\"Received audio data:\", audioData);\n      };\n      reader.readAsArrayBuffer(event.data); // Read received Blob as ArrayBuffer\n    };\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN && event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n      mediaRecorderRef.current.start(100); // Start recording with chunk size of 100ms or every 100ms\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Speech to Text Service\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isConnected ? disconnectWebSocket : connectWebSocket,\n      children: isConnected ? \"Disconnect\" : \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording || !isConnected,\n      children: \"Start Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"Stop Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), audioUrl && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Saved Audio Playback:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        controls: true,\n        src: audioUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Received Audio Data:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), receivedData ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(Array.from(receivedData), null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio data received.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(Home, \"m+cYPjv5nNa8cQA1D1WZ8Fm7f/k=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","Home","_s","audioSocket","setAudioSocket","mediaRecorderRef","isRecording","setIsRecording","isConnected","setIsConnected","receivedData","setReceivedData","audioUrl","setAudioUrl","audioChunksRef","fetchSavedAudio","response","fetch","blob","size","console","error","URL","createObjectURL","Blob","type","connectWebSocket","socket","WebSocket","onopen","log","onmessage","event","reader","FileReader","onload","audioData","Uint8Array","result","url","readAsArrayBuffer","data","onclose","disconnectWebSocket","close","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","readyState","OPEN","push","send","start","stopRecording","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","controls","src","JSON","stringify","Array","from","_c","$RefreshReg$"],"sources":["/Users/hungthach/Documents/daiichi/speech-recognition/client-speech-recognition/src/component/Home.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\n\nconst Home = () => {\n  const [audioSocket, setAudioSocket] = useState<WebSocket | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [receivedData, setReceivedData] = useState<Uint8Array | null>(null);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null); // State to hold audio URL\n  const audioChunksRef = useRef<Blob[]>([]);\n\n  const fetchSavedAudio = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8080/audio\");\n      const blob = await response.blob();\n\n      if (blob.size === 0) {\n        console.error(\"Fetched Blob is empty\");\n        return;\n      }\n\n      const audioUrl = URL.createObjectURL(new Blob([blob], { type: \"audio/webm\" }));\n      setAudioUrl(audioUrl); // Update state with audio URL for playback\n    } catch (error) {\n      console.error(\"Error fetching audio:\", error);\n    }\n  };\n\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://localhost:7001/api/speech-recognition/\");\n\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n\n    socket.onmessage = (event) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const audioData = new Uint8Array(reader.result as ArrayBuffer);\n        setReceivedData(audioData);\n\n        // Create a Blob and an object URL for audio playback\n        const blob = new Blob([audioData], { type: \"audio/webm; codecs=opus\" });\n        const url = URL.createObjectURL(blob);\n        setAudioUrl(url); // Set the audio URL for playback\n\n        console.log(\"Received audio data:\", audioData);\n      };\n      reader.readAsArrayBuffer(event.data); // Read received Blob as ArrayBuffer\n    };\n\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN && event.data.size > 0) {\n          audioChunksRef.current.push(event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n\n      mediaRecorderRef.current.start(100); // Start recording with chunk size of 100ms or every 100ms\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Speech to Text Service</h1>\n      <button onClick={isConnected ? disconnectWebSocket : connectWebSocket}>\n        {isConnected ? \"Disconnect\" : \"Connect\"}\n      </button>\n      <br />\n      <button onClick={startRecording} disabled={isRecording || !isConnected}>\n        Start Streaming\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        Stop Streaming\n      </button>\n\n      {audioUrl && (\n        <div>\n          <h2>Saved Audio Playback:</h2>\n          <audio controls src={audioUrl} />\n        </div>\n      )}\n      <h2>Received Audio Data:</h2>\n      {receivedData ? (\n        <pre>{JSON.stringify(Array.from(receivedData), null, 2)}</pre>\n      ) : (\n        <p>No audio data received.</p>\n      )}\n    </div>\n  );\n};\nexport default Home;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}