{"ast":null,"code":"var _jsxFileName = \"/Users/hungthach/Documents/daiichi/webrtc/client/websocket/src/component/AudioStream.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudioStream() {\n  _s();\n  const [audioSocket, setAudioSocket] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [receivedData, setReceivedData] = useState(null);\n  const [audioUrl, setAudioUrl] = useState(null); // State to hold audio URL\n\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://3.25.223.42:80/audio-socket-endpoint\");\n    // const socket = new WebSocket(\"ws://localhost:8080/audio-socket-endpoint\");\n\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n    socket.onmessage = event => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const audioData = new Uint8Array(reader.result);\n        setReceivedData(audioData);\n\n        // Create a Blob and an object URL for audio playback\n        const blob = new Blob([audioData], {\n          type: \"audio/webm; codecs=opus\"\n        });\n        const url = URL.createObjectURL(blob);\n        setAudioUrl(url); // Set the audio URL for playback\n\n        console.log(\"Received audio data:\", audioData);\n      };\n      reader.readAsArrayBuffer(event.data); // Read received Blob as ArrayBuffer\n    };\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN) {\n          console.log(\"Sending audio chunk:\", event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n      mediaRecorderRef.current.start(100); // Start recording\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Streamer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isConnected ? disconnectWebSocket : connectWebSocket,\n      children: isConnected ? \"Disconnect\" : \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording || !isConnected,\n      children: \"Start Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"Stop Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Received Audio Data:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), receivedData ? /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(Array.from(receivedData), null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No audio data received.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n}\n_s(AudioStream, \"4YU7xpyDcyX79+gKKgeyFxFGMdQ=\");\n_c = AudioStream;\nvar _c;\n$RefreshReg$(_c, \"AudioStream\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","AudioStream","_s","audioSocket","setAudioSocket","mediaRecorderRef","isRecording","setIsRecording","isConnected","setIsConnected","receivedData","setReceivedData","audioUrl","setAudioUrl","connectWebSocket","socket","WebSocket","onopen","console","log","onmessage","event","reader","FileReader","onload","audioData","Uint8Array","result","blob","Blob","type","url","URL","createObjectURL","readAsArrayBuffer","data","onclose","disconnectWebSocket","close","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","current","MediaRecorder","ondataavailable","readyState","OPEN","send","start","error","stopRecording","stop","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","JSON","stringify","Array","from","_c","$RefreshReg$"],"sources":["/Users/hungthach/Documents/daiichi/webrtc/client/websocket/src/component/AudioStream.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\n\nexport default function AudioStream() {\n  const [audioSocket, setAudioSocket] = useState<WebSocket | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const [receivedData, setReceivedData] = useState<Uint8Array | null>(null);\n  const [audioUrl, setAudioUrl] = useState<string | null>(null); // State to hold audio URL\n\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://3.25.223.42:80/audio-socket-endpoint\");\n    // const socket = new WebSocket(\"ws://localhost:8080/audio-socket-endpoint\");\n\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n\n    socket.onmessage = (event) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const audioData = new Uint8Array(reader.result as ArrayBuffer);\n        setReceivedData(audioData);\n\n        // Create a Blob and an object URL for audio playback\n        const blob = new Blob([audioData], { type: \"audio/webm; codecs=opus\" });\n        const url = URL.createObjectURL(blob);\n        setAudioUrl(url); // Set the audio URL for playback\n\n        console.log(\"Received audio data:\", audioData);\n      };\n      reader.readAsArrayBuffer(event.data); // Read received Blob as ArrayBuffer\n    };\n\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN) {\n          console.log(\"Sending audio chunk:\", event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n\n      mediaRecorderRef.current.start(100); // Start recording\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  return (\n    <div>\n      <h1>Audio Streamer</h1>\n      <button onClick={isConnected ? disconnectWebSocket : connectWebSocket}>\n        {isConnected ? \"Disconnect\" : \"Connect\"}\n      </button>\n      <br />\n      <button onClick={startRecording} disabled={isRecording || !isConnected}>\n        Start Streaming\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        Stop Streaming\n      </button>\n      <h2>Received Audio Data:</h2>\n      {receivedData ? (\n        <pre>{JSON.stringify(Array.from(receivedData), null, 2)}</pre>\n      ) : (\n        <p>No audio data received.</p>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}