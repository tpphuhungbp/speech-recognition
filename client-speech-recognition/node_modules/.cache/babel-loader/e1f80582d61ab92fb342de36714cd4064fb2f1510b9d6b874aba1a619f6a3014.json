{"ast":null,"code":"var _jsxFileName = \"/Users/hungthach/Documents/daiichi/webrtc/client/websocket/src/component/AudioStream.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AudioStream() {\n  _s();\n  const [audioSocket, setAudioSocket] = useState(null);\n  const mediaRecorderRef = useRef(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const audioContextRef = useRef(null); // Reference to the AudioContext\n\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://localhost:8080/audio-socket-endpoint\");\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n    socket.onmessage = event => {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        // Read received Blob as ArrayBuffer\n        const arrayBuffer = reader.result;\n\n        // Decode and play the audio data\n        if (audioContextRef.current) {\n          try {\n            const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n            const source = audioContextRef.current.createBufferSource();\n            source.buffer = audioBuffer;\n            source.connect(audioContextRef.current.destination);\n            source.start(0); // Start playing the audio\n          } catch (error) {\n            console.error(\"Error decoding audio data:\", error);\n          }\n        }\n      };\n      reader.readAsArrayBuffer(event.data); // Read received Blob as ArrayBuffer\n    };\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true\n      });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n      mediaRecorderRef.current.ondataavailable = event => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN) {\n          console.log(\"Sending audio chunk:\", event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n      mediaRecorderRef.current.start(100); // Start recording\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  // Initialize AudioContext on component mount\n  useEffect(() => {\n    audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n    return () => {\n      var _audioContextRef$curr;\n      (_audioContextRef$curr = audioContextRef.current) === null || _audioContextRef$curr === void 0 ? void 0 : _audioContextRef$curr.close(); // Clean up AudioContext on unmount\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Audio Streamer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: isConnected ? disconnectWebSocket : connectWebSocket,\n      children: isConnected ? \"Disconnect\" : \"Connect\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      disabled: isRecording || !isConnected,\n      children: \"Start Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      disabled: !isRecording,\n      children: \"Stop Streaming\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(AudioStream, \"weu44eyHY2WG3HQEDfsBFzitRhs=\");\n_c = AudioStream;\nvar _c;\n$RefreshReg$(_c, \"AudioStream\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","AudioStream","_s","audioSocket","setAudioSocket","mediaRecorderRef","isRecording","setIsRecording","isConnected","setIsConnected","audioContextRef","connectWebSocket","socket","WebSocket","onopen","console","log","onmessage","event","reader","FileReader","onload","arrayBuffer","result","current","audioBuffer","decodeAudioData","source","createBufferSource","buffer","connect","destination","start","error","readAsArrayBuffer","data","onclose","disconnectWebSocket","close","startRecording","stream","navigator","mediaDevices","getUserMedia","audio","MediaRecorder","ondataavailable","readyState","OPEN","send","stopRecording","stop","window","AudioContext","webkitAudioContext","_audioContextRef$curr","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/hungthach/Documents/daiichi/webrtc/client/websocket/src/component/AudioStream.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\n\nexport default function AudioStream() {\n  const [audioSocket, setAudioSocket] = useState<WebSocket | null>(null);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const [isRecording, setIsRecording] = useState(false);\n  const [isConnected, setIsConnected] = useState(false);\n  const audioContextRef = useRef<AudioContext | null>(null); // Reference to the AudioContext\n\n  const connectWebSocket = () => {\n    const socket = new WebSocket(\"ws://localhost:8080/audio-socket-endpoint\");\n\n    socket.onopen = () => {\n      console.log(\"Connected to WebSocket server\");\n      setAudioSocket(socket);\n      setIsConnected(true);\n    };\n\n    socket.onmessage = (event) => {\n      const reader = new FileReader();\n      reader.onload = async () => {\n        // Read received Blob as ArrayBuffer\n        const arrayBuffer = reader.result as ArrayBuffer;\n\n        // Decode and play the audio data\n        if (audioContextRef.current) {\n          try {\n            const audioBuffer = await audioContextRef.current.decodeAudioData(arrayBuffer);\n            const source = audioContextRef.current.createBufferSource();\n            source.buffer = audioBuffer;\n            source.connect(audioContextRef.current.destination);\n            source.start(0); // Start playing the audio\n          } catch (error) {\n            console.error(\"Error decoding audio data:\", error);\n          }\n        }\n      };\n      reader.readAsArrayBuffer(event.data); // Read received Blob as ArrayBuffer\n    };\n\n    socket.onclose = () => {\n      console.log(\"Disconnected from WebSocket server\");\n      setAudioSocket(null);\n      setIsConnected(false);\n    };\n  };\n\n  const disconnectWebSocket = () => {\n    if (audioSocket) {\n      audioSocket.close();\n    }\n  };\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      mediaRecorderRef.current = new MediaRecorder(stream);\n\n      mediaRecorderRef.current.ondataavailable = (event) => {\n        if (audioSocket && audioSocket.readyState === WebSocket.OPEN) {\n          console.log(\"Sending audio chunk:\", event.data);\n          audioSocket.send(event.data); // Send audio chunk over WebSocket\n        }\n      };\n\n      mediaRecorderRef.current.start(100); // Start recording\n      setIsRecording(true);\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n    }\n  };\n\n  // Initialize AudioContext on component mount\n  useEffect(() => {\n    audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\n    return () => {\n      audioContextRef.current?.close(); // Clean up AudioContext on unmount\n    };\n  }, []);\n\n  return (\n    <div>\n      <h1>Audio Streamer</h1>\n      <button onClick={isConnected ? disconnectWebSocket : connectWebSocket}>\n        {isConnected ? \"Disconnect\" : \"Connect\"}\n      </button>\n      <br />\n      <button onClick={startRecording} disabled={isRecording || !isConnected}>\n        Start Streaming\n      </button>\n      <button onClick={stopRecording} disabled={!isRecording}>\n        Stop Streaming\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}